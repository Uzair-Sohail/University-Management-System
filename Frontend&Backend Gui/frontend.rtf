{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\*\generator Riched20 10.0.18362}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang9 #frontend\par
from tkinter import *\par
import tkinter.messagebox\par
import dbbackend\par
class Student:\par
\par
    def __init__(self,root):\par
        self.root =root\par
        self.root.title("Student Database Management System")\par
        self.root.geometry("1350x750+0+0")\par
        self.root.config(bg="cadet blue")\par
\par
        StdID = StringVar()\par
        Firstname = StringVar()\par
        Surname = StringVar()\par
        DoB = StringVar()\par
        Age = StringVar()\par
        Gender = StringVar()\par
        Address = StringVar()\par
        Mobile = StringVar()\par
# --------------------------------------FUNCTIONS-------------------------------------------------------------------\par
        def iExit():\par
            iExit = tkinter.messagebox.askyesno("Student Database Management Systems", "Confirm if you want to exit")\par
            if iExit > 0:\par
                root.destroy()\par
                return\par
        def clearData():\par
            self.txtStdID.delete(0, END)\par
            self.txtfna.delete(0, END)\par
            self.txtSna.delete(0, END)\par
            self.txtDoB.delete(0, END)\par
            self.txtAge.delete(0, END)\par
            self.txtGender.delete(0, END)\par
            self.txtAdr.delete(0, END)\par
            self.txtMobile.delete(0, END)\par
        def addData():\par
            if(len(StdID.get())!=0):\par
                dbbackend.addStdRec(StdID.get(), Firstname.get(), Surname.get() , DoB.get() ,Age.get(), Gender.get(), Address.get(), Mobile.get())\par
                studentlist.delete(0, END)\par
                studentlist.insert(END, (StdID.get(), Firstname.get(), Surname.get(), DoB.get(), Age.get(), Gender.get(), Address.get(), Mobile.get()))\par
\par
        def DisplayData():\par
            studentlist.delete(0,END)\par
            for row in dbbackend.viewData():\par
                studentlist.insert(END, row, str(""))\par
\par
        def StudentRec(event):\par
            global sd\par
            searchStd= studentlist.curselection()[0]\par
            sd = studentlist.get(searchStd)\par
\par
            self.txtStdID.delete(0, END)\par
            self.txtStdID.insert(END, sd[1])\par
            self.txtfna.delete(0, END)\par
            self.txtfna.insert(END, sd[2])\par
            self.txtSna.delete(0, END)\par
            self.txtSna.insert(END, sd[3])\par
            self.txtDoB.delete(0, END)\par
            self.txtDoB.insert(END, sd[4])\par
            self.txtAge.delete(0, END)\par
            self.txtAge.insert(END, sd[5])\par
            self.txtGender.delete(0, END)\par
            self.txtGender.insert(END, sd[6])\par
            self.txtAdr.delete(0, END)\par
            self.txtAdr.insert(END, sd[7])\par
            self.txtMobile.delete(0, END)\par
            self.txtMobile.insert(END, sd[8])\par
\par
        def DeleteData():\par
            if(len(StdID.get())!=0):\par
                dbbackend.deleteRec(sd[0])\par
                clearData()\par
                DisplayData()\par
\par
        def searchDatabase():\par
            studentlist.delete(0,END)\par
            for row in dbbackend.searchData(StdID.get(), Firstname.get(), Surname.get() , DoB.get() ,Age.get(), Gender.get(), Address.get(), Mobile.get()):\par
                studentlist.insert(END, row, str(""))\par
\par
        def update():\par
            if (len(StdID.get()) != 0):\par
                dbbackend.deleteRec(sd[0])\par
            if (len(StdID.get()) != 0):\par
                dbbackend.addStdRec(StdID.get(), Firstname.get(), Surname.get(), DoB.get(), Age.get(), Gender.get(),Address.get(), Mobile.get())\par
                studentlist.delete(0, END)\par
                studentlist.insert(END, (StdID.get(), Firstname.get(), Surname.get(), DoB.get(), Age.get(), Gender.get(), Address.get(), Mobile.get()))\par
#--------------------------------------Frames-----------------------------------------------------------------------__________________________________________________________\par
        MainFrame = Frame(self.root, bg="cadet blue")\par
        MainFrame.grid()\par
        TitFrame = Frame(MainFrame, bd=2, padx=54,pady=8, bg="Ghost White", relief=RIDGE)\par
        TitFrame.pack(side=TOP)\par
        self.lblTit = Label(TitFrame ,font=('times new roman',48,'bold'),text="Student Database Management System",bg="Ghost White")\par
        self.lblTit.grid()\par
        ButtonFrame =Frame(MainFrame,bd=2,width=1350,height=70,padx=19,pady=10,bg="Ghost White",relief =RIDGE)\par
        ButtonFrame.pack(side=BOTTOM)\par
        DataFrame = Frame(MainFrame, bd=1, width=1300, height=400, padx=20, pady=20, relief=RIDGE,bg="cadet blue")\par
        DataFrame.pack(side=BOTTOM)\par
        DataFrameLEFT = LabelFrame(DataFrame, bd=1, width=1000, height=600, padx=20,relief=RIDGE,bg="Ghost White", font=('times new roman',26,'bold'),text="Student Info\\n")\par
        DataFrameLEFT.pack(side=LEFT)\par
        DataFrameRIGHT = LabelFrame(DataFrame, bd=1, width=450, height=300, padx=31, pady=3, relief=RIDGE,bg="Ghost White",font=('times new roman',20,'bold'),text="Student Details\\n")\par
        DataFrameRIGHT.pack(side=RIGHT)\par
#--------------------------------entries-------------------------------------------------------------------------------------------------\par
        self.lblStdID = Label(DataFrameLEFT, font=('times new roman', 20, 'bold'), text="Student ID:",padx=2,pady=2,bg="Ghost White")\par
        self.lblStdID.grid(row=0,column=0,sticky=W)\par
        self.txtStdID = Entry(DataFrameLEFT, font=('times new roman', 20, 'bold'), textvariable=StdID, width=39)\par
        self.txtStdID.grid(row=0, column=1)\par
\par
        self.lblfna = Label(DataFrameLEFT, font=('times new roman', 20, 'bold'), text="Firstname:", padx=2, pady=2,bg="Ghost White")\par
        self.lblfna.grid(row=1, column=0, sticky=W)\par
        self.txtfna = Entry(DataFrameLEFT, font=('times new roman', 20, 'bold'), textvariable=Firstname, width=39)\par
        self.txtfna.grid(row=1, column=1)\par
\par
        self.lblSna = Label(DataFrameLEFT, font=('times new roman', 20, 'bold'), text="Surname:", padx=2, pady=2,bg="Ghost White")\par
        self.lblSna.grid(row=2, column=0, sticky=W)\par
        self.txtSna = Entry(DataFrameLEFT, font=('times new roman', 20, 'bold'), textvariable=Surname, width=39)\par
        self.txtSna.grid(row=2, column=1)\par
\par
        self.lblDoB = Label(DataFrameLEFT, font=('times new roman', 20, 'bold'), text="Date of Birth:", padx=2, pady=2,bg="Ghost White")\par
        self.lblDoB.grid(row=3, column=0, sticky=W)\par
        self.txtDoB = Entry(DataFrameLEFT, font=('times new roman', 20, 'bold'), textvariable=DoB, width=39)\par
        self.txtDoB.grid(row=3, column=1)\par
\par
        self.lblAge = Label(DataFrameLEFT, font=('times new roman', 20, 'bold'), text="Age:", padx=2, pady=2,bg="Ghost White")\par
        self.lblAge.grid(row=4, column=0, sticky=W)\par
        self.txtAge = Entry(DataFrameLEFT, font=('times new roman', 20, 'bold'), textvariable=Age, width=39)\par
        self.txtAge.grid(row=4, column=1)\par
\par
        self.lblGender = Label(DataFrameLEFT, font=('times new roman', 20, 'bold'), text="Gender:", padx=2, pady=2,bg="Ghost White")\par
        self.lblGender.grid(row=5, column=0, sticky=W)\par
        self.txtGender = Entry(DataFrameLEFT, font=('times new roman', 20, 'bold'), textvariable=Gender, width=39)\par
        self.txtGender.grid(row=5, column=1)\par
\par
        self.lblAdr = Label(DataFrameLEFT, font=('times new roman', 20, 'bold'), text="Address:", padx=2, pady=2,bg="Ghost White")\par
        self.lblAdr.grid(row=6, column=0, sticky=W)\par
        self.txtAdr = Entry(DataFrameLEFT, font=('times new roman', 20, 'bold'), textvariable=Address, width=39)\par
        self.txtAdr.grid(row=6, column=1)\par
\par
        self.lblMobile = Label(DataFrameLEFT, font=('times new roman', 20, 'bold'), text="Mobile:", padx=2, pady=2,bg="Ghost White")\par
        self.lblMobile.grid(row=7, column=0, sticky=W)\par
        self.txtMobile = Entry(DataFrameLEFT, font=('times new roman', 20, 'bold'), textvariable=Mobile, width=39)\par
        self.txtMobile.grid(row=7, column=1)\par
#--------------------------------------scroll bar and list box----------------------------------------------------------------------------\par
        scrollbar= Scrollbar(DataFrameRIGHT)\par
        scrollbar.grid(row=0,column=1,sticky='ns')\par
\par
        studentlist = Listbox(DataFrameRIGHT, width=41, height=16, font=('times new roman', 12, 'bold'),yscrollcommand=scrollbar.set)\par
        studentlist.bind('<<ListboxSelect>>',StudentRec)\par
        studentlist.grid(row=0, column=0, padx=8)\par
        scrollbar.config(command=studentlist.yview)\par
#--------------------------------------buttons-----------------------------------------------------------------------------------------------------------\par
        self.btnAddData = Button(ButtonFrame, text="Add New", font=('times new roman', 20, 'bold'), height=1, width=10, bd=4, command=addData)\par
        self.btnAddData.grid(row=0, column =0)\par
\par
        self.btnDisplayData = Button(ButtonFrame, text="Display", font=('times new roman', 20, 'bold'), height=1, width=10, bd=4, command=DisplayData)\par
        self.btnDisplayData.grid(row=0, column=1)\par
\par
        self.btnClearData = Button(ButtonFrame, text="Clear", font=('times new roman', 20, 'bold'), height=1, width=10, bd=4,command=clearData)\par
        self.btnClearData.grid(row=0, column=2)\par
\par
        self.btnDeleteData = Button(ButtonFrame, text="Delete", font=('times new roman', 20, 'bold'), height=1, width=10, bd=4,command=DeleteData)\par
        self.btnDeleteData.grid(row=0, column=3)\par
\par
        self.btnSearchData = Button(ButtonFrame, text="Search", font=('times new roman', 20, 'bold'), height=1, width=10, bd=4,command=searchDatabase)\par
        self.btnSearchData.grid(row=0, column=4)\par
\par
        self.btnUpdateData = Button(ButtonFrame, text="Update", font=('times new roman', 20, 'bold'), height=1, width=10, bd=4,command=update)\par
        self.btnUpdateData.grid(row=0, column=5)\par
\par
        self.btnExit = Button(ButtonFrame, text="Exit", font=('times new roman', 20, 'bold'), height=1, width=10, bd=4, command=iExit)\par
        self.btnExit.grid(row=0, column=6)\par
\par
if __name__=='__main__':\par
    root = Tk()\par
    application = Student(root)\par
    root.mainloop()\par
}
 